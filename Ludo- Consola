#include <iostream>
#include <conio.h>
#include <time.h>
#include <cstdlib>

using namespace std;
using namespace System;

//Valencia Tapia, Emir - UPC

#define FILAS 22
#define COLUMNAS 60

int Mapa_Ludo[FILAS][COLUMNAS] = {
	{	0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,2	,2	,2	,2	,2	,2	,20	,21	,22	,3	,3	,3	,3	,3	,3	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,2	,1	,1	,1	,1	,2	,19	,67	,23	,3	,1	,1	,1	,1	,3	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,2	,1	,6	,7	,1	,2	,18	,68	,24	,3	,1	,85	,86	,1	,3	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,2	,1	,8	,9	,1	,2	,17	,69	,25	,3	,1	,87	,88	,1	,3	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,2	,1	,1	,1	,1	,2	,16	,70	,26	,3	,1	,1	,1	,1	,3	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,2	,2	,2	,2	,2	,2	,15	,71	,27	,3	,3	,3	,3	,3	,3	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,1	,10	,11	,12	,13	,14	,99	,72	,99	,28	,29	,30	,31	,32	,33	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,60	,61	,62	,63	,64	,65	,66	,99	,78	,77	,76	,75	,74	,73	,34	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,59	,58	,57	,56	,55	,54	,99	,84	,99	,40	,39	,38	,37	,36	,35	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,4	,4	,4	,4	,4	,4	,53	,83	,41	,5	,5	,5	,5	,5	,5	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,4	,1	,1	,1	,1	,4	,52	,82	,42	,5	,1	,1	,1	,1	,5	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,4	,1	,89	,90	,1	,4	,51	,81	,43	,5	,1	,93	,94	,1	,5	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,4	,1	,91	,92	,1	,4	,50	,80	,44	,5	,1	,95	,96	,1	,5	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,4	,1	,1	,1	,1	,4	,49	,79	,45	,5	,1	,1	,1	,1	,5	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,4	,4	,4	,4	,4	,4	,48	,47	,46	,5	,5	,5	,5	,5	,5	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,99	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	},
	{	0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	,0	}
};

int Portada[FILAS][COLUMNAS] = {
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,2	,2	,4	,2	,2	,5	,5	,5	,5	,2	,2	,2	,2	,2	,2	,6	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,2	,2	,4	,2	,2	,5	,2	,2	,2	,5	,2	,2	,2	,2	,6	,2	,2	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,2	,2	,4	,2	,2	,5	,2	,2	,2	,2	,5	,2	,2	,6	,2	,2	,2	,2	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,2	,2	,4	,2	,2	,5	,2	,2	,2	,2	,5	,2	,2	,6	,2	,2	,2	,2	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,2	,2	,4	,2	,2	,5	,2	,2	,2	,2	,5	,2	,2	,6	,2	,2	,2	,2	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,2	,2	,4	,2	,2	,5	,2	,2	,2	,2	,5	,2	,2	,6	,2	,2	,2	,2	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,2	,2	,4	,2	,2	,5	,2	,2	,2	,2	,5	,2	,2	,6	,2	,2	,2	,2	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,2	,2	,2	,2	,2	,2	,2	,2	,4	,2	,2	,4	,2	,2	,2	,5	,2	,2	,2	,5	,2	,2	,2	,2	,6	,2	,2	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,3	,3	,3	,3	,3	,3	,2	,2	,2	,2	,4	,4	,2	,2	,2	,2	,5	,5	,5	,5	,2	,2	,2	,2	,2	,2	,6	,6	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	}
};

int Dado_6[FILAS][COLUMNAS] = {
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,1	,0	,1	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,1	,0	,1	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,1	,0	,1	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	}
};

int Dado_5[FILAS][COLUMNAS] = {
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,1	,0	,1	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,1	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,1	,0	,1	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	}
};

int Dado_4[FILAS][COLUMNAS] = {
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,1	,0	,1	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,1	,0	,1	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	}
};

int Dado_3[FILAS][COLUMNAS] = {
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,1	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,1	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,1	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	}
};

int Dado_2[FILAS][COLUMNAS] = {
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,1	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,1	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	}
};

int Dado_1[FILAS][COLUMNAS] = {
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,1	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,0	,0	,0	,0	,0	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,1	,1	,1	,1	,1	,1	,1	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	},
	{	2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	,2	}

};

void Pintar_Portada() {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			if (Portada[f][c] == 3) {
				Console::SetCursorPosition(c, f);
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(219);
			}
			if (Portada[f][c] == 4) {
				Console::SetCursorPosition(c, f);
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(219);
			}
			if (Portada[f][c] == 5) {
				Console::SetCursorPosition(c, f);
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(219);
			}
			if (Portada[f][c] == 6) {
				Console::SetCursorPosition(c, f);
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(219);
			}
			if (Portada[f][c] == 2) {
				Console::SetCursorPosition(c, f);
				Console::ForegroundColor = ConsoleColor::DarkRed;
				cout << char(176);
			}
		}
	}
	Console::SetCursorPosition(20, 14);
	Console::ForegroundColor = ConsoleColor::Cyan;
	cout << "Proyecto Final-Ludo";
	Console::SetCursorPosition(20, 16);
	Console::ForegroundColor = ConsoleColor::Cyan;
	cout << "Valencia Tapia,Emir";
	Console::SetCursorPosition(16, 18);
	Console::ForegroundColor = ConsoleColor::Cyan;
	cout << "UPC - Ingenieria de Sistemas";
	Console::SetCursorPosition(17, 20);
	Console::ForegroundColor = ConsoleColor::Cyan;
	cout << "Programacion 1 CC47 - SS1F";
	_getch();
}

int Dado() {
	int dado;
	dado = 1 + rand() % 6;
	return dado;
}

void Imprimir_Avance(int dado) {
	Console::SetCursorPosition(36, 6);
	Console::ForegroundColor = ConsoleColor::White;
	cout << "Avanza " << dado;
}

void ImprimirTurno(int x) {
	if (x == 1) {
		Console::SetCursorPosition(1, 26);
		Console::ForegroundColor = ConsoleColor::Green;
		cout << "Turno del Verde   ";
		Console::SetCursorPosition(20, 26);
		cout << char(190);
	}
	if (x == 2) {
		Console::SetCursorPosition(1, 26);
		Console::ForegroundColor = ConsoleColor::Red;
		cout << "Turno del Rojo    ";
		Console::SetCursorPosition(20, 26);
		cout << char(189);
	}
	if (x == 3) {
		Console::SetCursorPosition(1, 26);
		Console::ForegroundColor = ConsoleColor::Blue;
		cout << "Turno del Azul    ";
		Console::SetCursorPosition(20, 26);
		cout << char(245);
	}
	if (x == 4) {
		Console::SetCursorPosition(1, 26);
		Console::ForegroundColor = ConsoleColor::Yellow;
		cout << "Turno del Amarillo";
		Console::SetCursorPosition(20, 26);
		cout << char(207);
	}
	
}

void Imprimir_Dado(int dado) {

	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			if (dado == 6) {
				Console::SetCursorPosition(c, f);
				if (Dado_6[f][c] == 1) {
					Console::ForegroundColor = ConsoleColor::Black;
					cout << char(219);
				}
				if (Dado_6[f][c] == 0) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
			}
			if (dado == 5) {
				Console::SetCursorPosition(c, f);
				if (Dado_5[f][c] == 1) {
					Console::ForegroundColor = ConsoleColor::Black;
					cout << char(219);
				}
				if (Dado_5[f][c] == 0) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
			}
			if (dado == 4) {
				Console::SetCursorPosition(c, f);
				if (Dado_4[f][c] == 1) {
					Console::ForegroundColor = ConsoleColor::Black;
					cout << char(219);
				}
				if (Dado_4[f][c] == 0) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
			}
			if (dado == 3) {
				Console::SetCursorPosition(c, f);
				if (Dado_3[f][c] == 1) {
					Console::ForegroundColor = ConsoleColor::Black;
					cout << char(219);
				}
				if (Dado_3[f][c] == 0) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
			}
			if (dado == 2) {
				Console::SetCursorPosition(c, f);
				if (Dado_2[f][c] == 1) {
					Console::ForegroundColor = ConsoleColor::Black;
					cout << char(219);
				}
				if (Dado_2[f][c] == 0) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
			}
			if (dado == 1) {
				Console::SetCursorPosition(c, f);
				if (Dado_1[f][c] == 1) {
					Console::ForegroundColor = ConsoleColor::Black;
					cout << char(219);
				}
				if (Dado_1[f][c] == 0) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
			}
		}
	}
}

void GanadorVerde() {
	Console::SetCursorPosition(1, 1);
	cout << "Felicidades El Equipo Verde Ha GANADO";
}

void GanadorAzul() {
	Console::SetCursorPosition(1, 1);
	cout << "Felicidades El Equipo Azul Ha GANADO";
}

void GanadorAmarillo() {
	Console::SetCursorPosition(1, 1);
	cout << "Felicidades El Equipo Amarillo Ha GANADO";
}

void GanadorRojo() {
	Console::SetCursorPosition(1, 1);
	cout << "Felicidades El Equipo Rojo Ha GANADO";
}

void Pintar_Mapa_Ludo() {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == 0) {
				Console::ForegroundColor = ConsoleColor::DarkYellow;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 1) {
				Console::ForegroundColor = ConsoleColor::White;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 2) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 3) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 4) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 5) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(219);
			}
			//PINTAR LAS FICHAS
			if (Mapa_Ludo[f][c] >= 6 && Mapa_Ludo[f][c] <= 9) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(190);
			}
			if (Mapa_Ludo[f][c] >= 85 && Mapa_Ludo[f][c] <= 88) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(189);
			}
			if (Mapa_Ludo[f][c] >= 89 && Mapa_Ludo[f][c] <= 92) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(207);
			}
			if (Mapa_Ludo[f][c] >= 93 && Mapa_Ludo[f][c] <= 96) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(245);
			}
			//TERMINADO
			//PINTAR ENTRADAS
			if (Mapa_Ludo[f][c] < 67 && Mapa_Ludo[f][c] > 60) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] < 73 && Mapa_Ludo[f][c] > 66) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] < 79 && Mapa_Ludo[f][c] > 72) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] < 85 && Mapa_Ludo[f][c] > 78) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(219);
			}
			//TERMINADO
			//PINTAR UNO DE CAMINO
			if (Mapa_Ludo[f][c] == 10)  {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 23) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 36) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(219);
			}
			if (Mapa_Ludo[f][c] == 49) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(219);
			}
			//TERMINADO
			//PINTAR CASILLAS
			if ((Mapa_Ludo[f][c] > 10 && Mapa_Ludo[f][c] < 61) && Mapa_Ludo[f][c] != 23 && Mapa_Ludo[f][c] != 36 && Mapa_Ludo[f][c] != 49) {
				if (Mapa_Ludo[f][c] % 2 == 0) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (Mapa_Ludo[f][c] % 2 == 1) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
			}
			if (Mapa_Ludo[f][c] == 99) {
				Console::ForegroundColor = ConsoleColor::Black;
				cout << char(219);
			}
			//TERMINADO
		}
	}
}

//SACAR FICHAS
void Sacar_Ficha_Verde() {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == 10) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(190);
			}
		}
		cout << "\n";
	}
}

void Sacar_Ficha_Roja() {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == 23) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(189);
			}
		}
		cout << "\n";
	}
}

void Sacar_Ficha_Azul() {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == 36) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(245);
			}
		}
		cout << "\n";
	}
}

void Sacar_Ficha_Amarillo() {
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == 49) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(207);
			}
		}
		cout << "\n";
	}
}

// VERDES
int Mover_Ficha_Verde_1(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Verde_1[57]{10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66};
	a = Recorrido_Verde_1[k];
	b = Recorrido_Verde_1[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(190);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a!=10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}
				
			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Verde_2(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Verde_2[57]{ 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66 };
	a = Recorrido_Verde_2[k];
	b = Recorrido_Verde_2[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(190);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Verde_3(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Verde_3[57]{ 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66 };
	a = Recorrido_Verde_3[k];
	b = Recorrido_Verde_3[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(190);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Verde_4(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Verde_4[57]{ 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66 };
	a = Recorrido_Verde_4[k];
	b = Recorrido_Verde_4[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Green;
				cout << char(190);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

//ROJOS
int Mover_Ficha_Rojo_1(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Rojo_1[57]{ 23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,67,68,69,70,71,72};
	a = Recorrido_Rojo_1[k];
	b = Recorrido_Rojo_1[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(189);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				//PINTAR BORRADO DE ENTRADAS
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Rojo_2(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Rojo_2[57]{ 23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,67,68,69,70,71,72 };
	a = Recorrido_Rojo_2[k];
	b = Recorrido_Rojo_2[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(189);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				//PINTAR BORRADO DE ENTRADAS
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Rojo_3(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Rojo_3[57]{ 23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,67,68,69,70,71,72 };
	a = Recorrido_Rojo_3[k];
	b = Recorrido_Rojo_3[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(189);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				//PINTAR BORRADO DE ENTRADAS
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Rojo_4(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Rojo_4[57]{ 23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,67,68,69,70,71,72 };
	a = Recorrido_Rojo_4[k];
	b = Recorrido_Rojo_4[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Red;
				cout << char(189);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				//PINTAR BORRADO DE ENTRADAS
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

//AZUL

int Mover_Ficha_Azul_1(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Azul_1[57]{ 36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,73,74,75,76,77,78 };
	a = Recorrido_Azul_1[k];
	b = Recorrido_Azul_1[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(245);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Azul_2(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Azul_2[57]{ 36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,73,74,75,76,77,78 };
	a = Recorrido_Azul_2[k];
	b = Recorrido_Azul_2[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(245);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Azul_3(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Azul_3[57]{ 36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,73,74,75,76,77,78 };
	a = Recorrido_Azul_3[k];
	b = Recorrido_Azul_3[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(245);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Azul_4(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Azul_4[57]{ 36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,73,74,75,76,77,78 };
	a = Recorrido_Azul_4[k];
	b = Recorrido_Azul_4[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Blue;
				cout << char(245);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

//AMARILLO

int Mover_Ficha_Amarillo_1(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Amarillo_1[57]{49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,79,80,81,82,83,84};
	a = Recorrido_Amarillo_1[k];
	b = Recorrido_Amarillo_1[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(207);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Amarillo_2(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Amarillo_2[57]{ 49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,79,80,81,82,83,84 };
	a = Recorrido_Amarillo_2[k];
	b = Recorrido_Amarillo_2[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(207);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Amarillo_3(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Amarillo_3[57]{ 49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,79,80,81,82,83,84 };
	a = Recorrido_Amarillo_3[k];
	b = Recorrido_Amarillo_3[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(207);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

int Mover_Ficha_Amarillo_4(int dado, int p, int k) {
	p = k + dado;
	int a, b;
	int Recorrido_Amarillo_4[57]{ 49,50,51,52,53,54,55,56,57,58,59,60,97,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,79,80,81,82,83,84 };
	a = Recorrido_Amarillo_4[k];
	b = Recorrido_Amarillo_4[p];
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			Console::SetCursorPosition(c, f);
			if (Mapa_Ludo[f][c] == b) {
				Console::ForegroundColor = ConsoleColor::Yellow;
				cout << char(207);
			}
			if (Mapa_Ludo[f][c] == a) {
				if (a % 2 == 0 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::Gray;
					cout << char(219);
				}
				if (a % 2 == 1 && k < 51 && a != 10 && a != 23 && a != 36 && a != 49) {
					Console::ForegroundColor = ConsoleColor::White;
					cout << char(219);
				}
				if (k >= 51 && k <= 56) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}
				if (a == 10) {
					Console::ForegroundColor = ConsoleColor::Green;
					cout << char(219);
				}
				if (a == 23) {
					Console::ForegroundColor = ConsoleColor::Red;
					cout << char(219);
				}
				if (a == 36) {
					Console::ForegroundColor = ConsoleColor::Blue;
					cout << char(219);
				}
				if (a == 49) {
					Console::ForegroundColor = ConsoleColor::Yellow;
					cout << char(219);
				}

			}
		}
		cout << "\n";
	}
	k = k + dado;
	return p, k;
}

//JUGAR FICHAS

void Jugar_Fichas() {
	int dado, turnoglobal = 0, turnoindividual = 0;
	int iv = 0, ir = 0, iazul = 0, iama = 0,ganadorverde = 0, ganadorrojo = 0, ganadorazul = 0, ganadoramarillo = 0;
	int Verde11 = 0, Verde21 = 0, Verde12 = 0, Verde22 = 0, Verde13 = 0, Verde23 = 0, Verde14 = 0, Verde24 = 0;
	int Rojo11 = 0, Rojo21 = 0, Rojo12 = 0, Rojo22 = 0, Rojo13 = 0, Rojo23 = 0, Rojo14 = 0, Rojo24 = 0;
	int Amarillo11 = 0, Amarillo21 = 0, Amarillo12 = 0, Amarillo22 = 0, Amarillo13 = 0, Amarillo23 = 0, Amarillo14 = 0, Amarillo24 = 0;
	int Azul11 = 0, Azul21 = 0, Azul12 = 0, Azul22 = 0, Azul13 = 0, Azul23 = 0, Azul14 = 0, Azul24 = 0;
	char tecla = -1;
	while (true) {
		if (_kbhit()) {
			srand(time(0));
			tecla = _getch();
			tecla = toupper(tecla);
			if (turnoindividual == 4) {
				turnoindividual = 0;
			}
			switch (tecla)
			{
			case 32: 
				dado = Dado();
				Imprimir_Dado(dado);
				Imprimir_Avance(dado);
				turnoglobal++;
				turnoindividual++;
				ImprimirTurno(turnoindividual);
				break;
			case 'P': 
				if (dado == 6) {
					if (turnoindividual == 1) {
						Sacar_Ficha_Verde();
						iv++;
					}
					if (turnoindividual == 2) {
						Sacar_Ficha_Roja(); 
						ir++;
					}
					if (turnoindividual == 3) {
						Sacar_Ficha_Azul();
						iazul++;
					}
					if (turnoindividual == 4) {
						Sacar_Ficha_Amarillo();
						iama++;
					}
					turnoindividual--;
					break;
				}
				else break;
			case 'Q': 
				//MOVER PRIMERA FICHA DE VERDE
				iv = 1;
				if (Verde21 + dado < 57 && iv == 1 && turnoindividual == 1) {
					Mover_Ficha_Verde_1(dado,Verde11, Verde21);
					Verde21 = Verde21 + dado;
					if (Verde21 == 57) {
						ganadorverde++;
					}
					break;
				}
				//MOVER PRIMERA FICHA DE ROJO
				ir == 1;
				if (Rojo21 + dado < 57 && ir == 1 && turnoindividual == 2) {
					Mover_Ficha_Rojo_1(dado, Rojo11, Rojo21);
					Rojo21 = Rojo21 + dado;
					if (Rojo21 == 57) {
						ganadorrojo++;
					}
					break;
				}
				//MOVER PRIMERA FICHA DE AZUL
				iazul == 1;
				if (Azul21 + dado < 57 && iazul == 1 && turnoindividual == 3) {
					Mover_Ficha_Azul_1(dado, Azul11, Azul21);
					Azul21 = Azul21 + dado;
					if (Azul21 == 57) {
						ganadorazul++;
					}
					break;
				}
				//MOVER PRIMERA FICHA DE AMARILLO
				iama == 1;
				if (Amarillo21 + dado < 57 && iama == 1 && turnoindividual == 4) {
					Mover_Ficha_Amarillo_1(dado, Amarillo11, Amarillo21);
					Amarillo21 = Amarillo21 + dado;
					if (Amarillo21 == 57) {
						ganadoramarillo++;
					}
					break;
				}

			case 'W':
				//MOVER SEGUNDA FICHA DE VERDE
				iv = 2;
				if (Verde22 + dado < 57 && iv == 2 && turnoindividual == 1) {
					Mover_Ficha_Verde_2(dado,Verde12, Verde22);
					Verde22 = Verde22 + dado;
					if (Verde22 == 57) {
						ganadorverde++;
					}
					break;
				}
				//MOVER SEGUNDA FICHA DE ROJO
				ir == 2;
				if (Rojo22 + dado < 57 && ir == 2 && turnoindividual == 2) {
					Mover_Ficha_Rojo_2(dado, Rojo12, Rojo22);
					Rojo22 = Rojo22 + dado;
					if (Rojo22 == 57) {
						ganadorrojo++;
					}
					break;
				}
				//MOVER SEGUNDA FICHA DE AZUL
				iazul == 2;
				if (Azul22 + dado < 57 && iazul == 2 && turnoindividual == 3) {
					Mover_Ficha_Azul_2(dado, Azul12, Azul22);
					Azul22 = Azul22 + dado;
					if (Azul22 == 57) {
						ganadorazul++;
					}
					break;
				}
				//MOVER SEGUNDA FICHA DE AMARILLO
				iama == 2;
				if (Amarillo22 + dado < 57 && iama == 2 && turnoindividual == 4) {
					Mover_Ficha_Amarillo_2(dado, Amarillo12, Amarillo22);
					Amarillo22 = Amarillo22 + dado;
					if (Amarillo22 == 57) {
						ganadoramarillo++;
					}
					break;
				}

			case 'E':
				//MOVER TERCERA FICHA DE VERDE
				iv = 3;
				if (Verde23 + dado < 58 && iv == 3 && turnoindividual == 1) {
					Mover_Ficha_Verde_3(dado, Verde13, Verde23);
					Verde23 = Verde23 + dado;
					if (Verde23 == 57) {
						ganadorverde++;
					}
					break;
				}
				//MOVER TERCERA FICHA DE ROJO
				ir == 3;
				if (Rojo23 + dado < 58 && ir == 3 && turnoindividual == 2) {
					Mover_Ficha_Rojo_3(dado, Rojo13, Rojo23);
					Rojo23 = Rojo23 + dado;
					if (Rojo23 == 57) {
						ganadorrojo++;
					}
					break;
				}
				//MOVER TERCERA FICHA DE AZUL
				iazul == 3;
				if (Azul23 + dado < 58 && iazul == 3 && turnoindividual == 3) {
					Mover_Ficha_Azul_3(dado, Azul13, Azul23);
					Azul23 = Azul23 + dado;
					if (Azul23 == 57) {
						ganadorazul++;
					}
					break;
				}
				//MOVER TERCERA FICHA DE AMARILLO
				iama == 3;
				if (Amarillo23 + dado < 58 && iama == 3 && turnoindividual == 4) {
					Mover_Ficha_Amarillo_3(dado, Amarillo13, Amarillo23);
					Amarillo23 = Amarillo23 + dado;
					if (Amarillo23 == 57) {
						ganadoramarillo++;
					}
					break;
				}
			case 'R':
				//MOVER CUARTA FICHA DE VERDE
				iv = 4;
				if (Verde24 + dado < 58 && iv == 4 && turnoindividual == 1) {
					Mover_Ficha_Verde_4(dado,Verde14, Verde24);
					Verde24 = Verde24 + dado;
					if (Verde24 == 57) {
						ganadorverde++;
					}
					break;
				}
				//MOVER CUARTA FICHA DE ROJO
				ir == 4;
				if (Rojo24 + dado < 58 && ir == 4 && turnoindividual == 2) {
					Mover_Ficha_Rojo_4(dado, Rojo14, Rojo24);
					Rojo24 = Rojo24 + dado;
					if (Rojo24 == 57) {
						ganadorrojo++;
					}
					break;
				}
				//MOVER CUARTA FICHA DE AZUL
				iazul == 4;
				if (Azul24 + dado < 58 && iazul == 4 && turnoindividual == 3) {
					Mover_Ficha_Azul_4(dado, Azul14, Azul24);
					Azul24 = Azul24 + dado;
					if (Azul24 == 57) {
						ganadorazul++;
					}
					break;
				}
				//MOVER CUARTA FICHA DE AMARILLO
				iama == 4;
				if (Amarillo24 + dado < 58 && iama == 4 && turnoindividual == 4) {
					Mover_Ficha_Amarillo_4(dado, Amarillo14, Amarillo24);
					Amarillo24 = Amarillo24 + dado;
					if (Amarillo24 == 57) {
						ganadoramarillo++;
					}
					break;
				}
			}
			if (ganadorverde == 4) {
				GanadorVerde();
			}
			if (ganadorrojo == 4) {
				GanadorRojo();
			}
			if (ganadorazul == 4) {
				GanadorAzul();
			}
			if (ganadoramarillo == 4) {
				GanadorAmarillo();
			}
			Console::Title = "                                                                                                                                    Proyecto Final - Ludo      Jugada: " + turnoglobal.ToString();
		}
	}
}

void Instrucciones() {
	Console::SetCursorPosition(1,22);
	cout << "Presione barra espacio para lanzar dado.\n Presionar 'P' para poner ficha en el mapa. \n Presionar 'Q','W','E' o 'R' para mover las fichas del juego respectivamente.";
}

void main() {
	Console::CursorVisible = false;
	Console::Title = "                                                                                                                                    Proyecto Final - Ludo";
	Pintar_Portada();
	system ("cls");
	Pintar_Mapa_Ludo();
	Instrucciones();
	Jugar_Fichas();
}
